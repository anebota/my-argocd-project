name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          description: "Checkout the repository code."

      - name: Install Argo CD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
        with:
          description: "Download and install the Argo CD CLI."

      - name: List Top-Level Directory
        run: |
          ls -R
        with:
          description: "List all files and directories at the top level of the repository."

      - name: List my-argocd-app Directory
        run: |
          if [ -d "my-argocd-app" ]; then
            ls -R my-argocd-app/
          else
            echo "my-argocd-app directory not found."
          fi
        with:
          description: "List all files and directories within the my-argocd-app directory."

      - name: List Config Directory
        run: |
          if [ -d "my-argocd-app/config" ]; then
            ls -R my-argocd-app/config/
          else
            echo "my-argocd-app/config directory not found."
          fi
        with:
          description: "List all files and directories within the config directory inside my-argocd-app."

      - name: List kubeconfig Directory
        run: |
          if [ -d "my-argocd-app/config/kubeconfig" ]; then
            ls -R my-argocd-app/config/kubeconfig/
          else
            echo "my-argocd-app/config/kubeconfig directory not found."
          fi
        with:
          description: "List all files and directories within the kubeconfig directory inside config."

      - name: Argo CD Login and Sync
        run: |
          for i in {1..5}; do
            argocd login a6ba9acf0aaaf45688787039fdb779de-2124910579.us-east-1.elb.amazonaws.com --username admin --password ws15tEtt-wcBZ3OK --grpc-web --insecure && break || sleep 15;
          done
          argocd app sync my-app --grpc-web --insecure
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          description: "Log into Argo CD server and synchronize the application, retrying up to five times if it fails."

      - name: Clear npm Cache
        run: |
          npm cache clean --force
          npm cache verify
        with:
          description: "Clear the npm cache to prevent issues caused by stale cache data."

      - name: Regenerate Dependencies
        run: |
          rm -rf ./app/package-lock.json ./app/node_modules
          npm set registry https://registry.npmjs.org/
          npm install --prefix ./app
        with:
          description: "Remove package-lock.json and node_modules to ensure a fresh installation of dependencies. Set npm registry and install dependencies."

      - name: Cache Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          description: "Cache npm dependencies to speed up subsequent workflow runs."

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          description: "Set up the Node.js environment with the specified version."

      - name: Install npm-force-resolutions
        run: |
          npm install npm-force-resolutions --save-dev
        with:
          description: "Install npm-force-resolutions to resolve any dependency conflicts automatically."

      - name: Install and Audit Dependencies
        run: |
          npx npm-force-resolutions
          npm install --prefix ./app
          npm audit fix --prefix ./app
        with:
          description: "Apply forced resolutions, install dependencies, and run npm audit fix to address security vulnerabilities."

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --no-cache -t my-app:latest ./app
        with:
          description: "Build the Docker image for the application without using the cache to ensure a clean build."

      - name: Tag Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        with:
          description: "Tag the Docker image with the short commit hash and the latest tag for versioning."

      - name: Authenticate with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        with:
          description: "Authenticate Docker with AWS Elastic Container Registry (ECR) using provided credentials."

      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        with:
          description: "Push the tagged Docker image to AWS ECR for deployment."

      - name: Create Snyk Policy File
        run: |
          mkdir -p ./my-argocd-app
          echo "ignore:
            SNYK-JS-CROSSSPAWN-8303230:
              - '*':
                  reason: 'Temporary ignore until resolved in upstream dependencies'
                  expires: '2024-12-31T00:00:00Z'" > ./my-argocd-app/.snyk
        with:
          description: "Create a Snyk policy file to manage dependency vulnerabilities."

      - name: Install Snyk CLI
        run: |
          npm install -g snyk
        with:
          description: "Install the Snyk CLI globally for dependency vulnerability scanning."

      - name: Run Snyk Scan
        run: |
          snyk test --file=./app/package.json --policy-path=./my-argocd-app --severity-threshold=medium --docker ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          description: "Run a Snyk scan on the application dependencies to detect vulnerabilities."

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          description: "Checkout the repository code."

      - name: List Top-Level Directory
        run: |
          ls -R
        with:
          description: "List all files and directories at the top level of the repository."

      - name: List my-argocd-app Directory
        run: |
          if [ -d "my-argocd-app" ]; then
            ls -R my-argocd-app/
          else
            echo "my-argocd-app directory not found."
          fi
        with:
          description: "List all files and directories within the my-argocd-app directory."

      - name: List Config Directory
        run: |
          if [ -d "my-argocd-app/config" ]; then
            ls -R my-argocd-app/config/
          else
            echo "my-argocd-app/config directory not found."
          fi
        with:
          description: "List all files and directories within the config directory inside my-argocd-app."

      - name: List kubeconfig Directory
        run: |
          if [_{{{CITATION{{{_1{](https://github.com/Uvacoder/what-if-grid/tree/5ecb22fa006fad29abafe356bc95e1a929069d97/notes%2Fsnippets%2F2020-10-07-github-actions.md)