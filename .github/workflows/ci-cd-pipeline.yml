name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Argo CD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: List Top-Level Directory
        run: |
          ls -R

      - name: List my-argocd-app Directory
        run: |
          if [ -d "my-argocd-app" ]; then
            ls -R my-argocd-app/
          else
            echo "my-argocd-app directory not found."
          fi

      - name: List Config Directory
        run: |
          if [ -d "my-argocd-app/config" ]; then
            ls -R my-argocd-app/config/
          else
            echo "my-argocd-app/config directory not found."
          fi

      - name: List kubeconfig Directory
        run: |
          if [ -d "my-argocd-app/config/kubeconfig" ]; then
            ls -R my-argocd-app/config/kubeconfig/
          else
            echo "my-argocd-app/config/kubeconfig directory not found."
          fi

      - name: Argo CD Login and Sync
        run: |
          for i in {1..5}; do
            argocd login a6ba9acf0aaaf45688787039fdb779de-2124910579.us-east-1.elb.amazonaws.com --username admin --password ws15tEtt-wcBZ3OK --grpc-web --insecure --timeout 300 && break || sleep 15;
          done
          argocd app sync my-app --grpc-web --insecure --timeout 300
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clear npm Cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Regenerate Dependencies
        run: |
          rm -rf ./app/package-lock.json ./app/node_modules
          npm set registry https://registry.npmjs.org/
          npm install --prefix ./app

      - name: Cache Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install npm-force-resolutions
        run: |
          npm install npm-force-resolutions --save-dev

      - name: Install and Audit Dependencies
        run: |
          npx npm-force-resolutions
          npm install --prefix ./app
          npm audit fix --prefix ./app

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --no-cache -t my-app:latest ./app

      - name: Tag Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Authenticate with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create Snyk Policy File
        run: |
          mkdir -p ./my-argocd-app
          echo "ignore:
            SNYK-JS-CROSSSPAWN-8303230:
              - '*':
                  reason: 'Temporary ignore until resolved in upstream dependencies'
                  expires: '2024-12-31T00:00:00Z'" > ./my-argocd-app/.snyk

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Run Snyk Scan
        run: |
          snyk test --file=./app/package.json --policy-path=./my-argocd-app --severity-threshold=medium --docker ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: List Top-Level Directory
        run: |
          ls -R

      - name: List my-argocd-app Directory
        run: |
          if [ -d "my-argocd-app" ]; then
            ls -R my-argocd-app/
          else
            echo "my-argocd-app directory not found."
          fi

      - name: List Config Directory
        run: |
          if [ -d "my-argocd-app/config" ]; then
            ls -R my-argocd-app/config/
          else
            echo "my-argocd-app/config directory not found."
          fi

      - name: List kubeconfig Directory
        run: |
          if [ -d "my-argocd-app/config/kubeconfig" ]; then
            ls -R my-argocd-app/config/kubeconfig/
          else
            echo "my-argocd-app/config/kubeconfig directory not found."
          fi

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          cp my-argocd-app/config/kubeconfig/kubeconfig.yaml ~/.kube/config
          kubectl config view
          kubectl cluster-info
        shell: bash

      - name: Debug Kubernetes Access
        run: |
          kubectl get nodes
          kubectl get namespaces
          kubectl get deployments --all-namespaces

      - name: Update Kubernetes Manifests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION|g" ./config/k8s/deployment.yaml

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f ./config/k8s/deployment.yaml --validate=false
        shell: bash

      - name: Verify Deployment Rollout
        run: |
          kubectl rollout status deployment/my-app -n my-namespace
