name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Upgrade to Node.js 20 for compatibility

      # Step 3: Audit and Fix Node.js Dependencies
      - name: Audit and Fix Node.js Dependencies
        run: |
          npm install --prefix ./app
          npm audit fix --prefix ./app  # Automatically fix vulnerabilities

      # Step 4: Run Snyk Dependency Scan (Node.js dependencies)
      - name: Snyk Dependency Scan
        uses: snyk/actions/node@master
        with:
          command: monitor
          args: --file=app/package.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 5: Update Docker (optional)
      - name: Update Docker
        run: |
          sudo apt-get update
          sudo apt-get install --only-upgrade docker-ce

      # Step 6: Ensure Script Permissions and Run ECR Login Script
      - name: Ensure Script Permissions and Run ECR Login Script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          # Ensure script exists
          if [ ! -f ./scripts/ecr-login.sh ]; then
            echo "Error: ./scripts/ecr-login.sh not found."
            exit 1
          fi

          # Add execute permissions
          chmod +x ./scripts/ecr-login.sh

          # Execute the script
          ./scripts/ecr-login.sh

      # Step 7: Build Docker Image
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --pull --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

      # Step 8: Scan Docker Image with Snyk
      - name: Snyk Docker Image Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          command: test
          args: --severity-threshold=low --sarif --json

      # Step 9: Fix Vulnerabilities in Docker Image (Optional)
      - name: Fix Vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          command: fix
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 10: Push Docker Image to ECR
      - name: Push Docker image to ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure kubectl for Amazon EKS
      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > ~/.kube/config

      # Step 3: Update Kubernetes manifests with the new image
      - name: Update Kubernetes manifests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          sed -i "s|my-argocd-app|$ECR_REGISTRY/$ECR_REPOSITORY:latest|g" ./config/k8s/deployment.yaml

      # Step 4: Apply Kubernetes manifests to Amazon EKS
      - name: Apply Kubernetes manifests to EKS
        run: |
          kubectl apply -f ./config/k8s/argocd-app.yaml