name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Clear npm cache thoroughly
      - name: Clear npm Cache Thoroughly
        run: |
          npm cache clean --force
          npm cache verify

      # Step 3: Regenerate package-lock.json and node_modules
      - name: Regenerate package-lock.json and node_modules
        run: |
          rm -rf ./app/package-lock.json ./app/node_modules
          npm set registry https://registry.npmjs.org/
          npm install --prefix ./app

      # Step 4: Cache Node.js dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 5: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 6: Install npm-force-resolutions
      - name: Install npm-force-resolutions
        run: |
          npm install npm-force-resolutions --save-dev

      # Step 7: Install and audit dependencies
      - name: Install and Audit Dependencies
        run: |
          npx npm-force-resolutions
          npm install --prefix ./app
          npm audit fix --prefix ./app

      # Step 8: Build Docker Image without caching
      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --no-cache -t my-app:latest ./app

      # Step 9: Tag Docker image with version
      - name: Tag Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Step 10: Authenticate Docker with AWS ECR
      - name: Authenticate with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 11: Push Docker image to ECR
      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Step 12: Properly create the Snyk policy file in the specified directory
      - name: Create Snyk Policy File
        run: |
          echo "ignore:
            SNYK-JS-CROSSSPAWN-8303230:
              - '*':
                  reason: 'Temporary ignore until resolved in upstream dependencies'
                  expires: '2024-12-31T00:00:00Z'" > ./my-argocd-app/.snyk

      # Step 13: Scan Docker image with Snyk, ensuring context is correct
      - name: Snyk Docker Image Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          command: test
          args: --severity-threshold=medium --docker

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure kubectl for Amazon EKS
      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > ~/.kube/config

      # Step 3: Update Kubernetes manifests with the new image
      - name: Update Kubernetes manifests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION|g" ./config/k8s/deployment.yaml

      # Step 4: Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f ./config/k8s/deployment.yaml

      # Step 5: Verify Kubernetes Deployment
      - name: verification
        run: |
          kubectl rollout status deployment/my-app -n my-namespace
