name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI (Versioned)
        run: |
          echo "Installing ArgoCD CLI..."
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.3/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          rm -rf ./app/package-lock.json ./app/node_modules
          npm install --prefix ./app

      - name: Build Docker Image
        run: |
          docker build --no-cache -t cloud14-app:latest ./app

      - name: Authenticate and Push to AWS ECR
        env:
          AWS_REGION: ap-southeast-1
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          VERSION=$(git rev-parse --short HEAD)
          docker tag cloud14-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag cloud14-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Run Snyk Security Scan
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk test --file=./app/package.json --severity-threshold=medium

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS CLI & EKS kubeconfig
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-southeast-1 --name cloud14-eks-cluster
          kubectl get nodes

      - name: Login & Sync ArgoCD
        run: |
          echo "Logging into ArgoCD..."
          argocd login a3280f5a583f7492a8cd65491bde941e-930957277.ap-southeast-1.elb.amazonaws.com \
            --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web --insecure
          echo "Triggering ArgoCD Sync..."
          argocd app sync cloud14-app --grpc-web --insecure || (sleep 10 && argocd app sync cloud14-app --grpc-web --insecure)
          echo "Verifying Sync Status..."
          argocd app get cloud14-app --grpc-web --insecure

