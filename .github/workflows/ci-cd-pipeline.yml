name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install and audit dependencies
      - name: Install and Audit Dependencies
        run: |
          npm install --prefix ./app
          npm audit fix --prefix ./app

      # Step 4: Build Docker image
      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --pull --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

     # Step 5: Authenticate Docker with AWS ECR
      - name: Authenticate Docker with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

      # Step 6: Push Docker image to ECR
      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Step 7: Scan Docker image with Snyk
      - name: Snyk Docker Image Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:my-app:latest
          command: test
          args: --severity-threshold=medium --json --docker

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure kubectl for Amazon EKS
      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > ~/.kube/config

      # Step 3: Update Kubernetes manifests with the new image
      - name: Update Kubernetes manifests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:latest|g" ./config/k8s/deployment.yaml

      # Step 4: Deploy to EKS
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f ./config/k8s/deployment.yaml

