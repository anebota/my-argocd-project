name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (Optional, if needed for other tasks)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Debug: Ensure Dockerfile exists
      - name: Debug: List files in app directory
        run: ls -R ./app

      # Step 4: Build Docker Image
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --pull --no-cache \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f ./app/Dockerfile ./app

      # Step 5: Scan Docker Image with Snyk
      - name: Snyk Docker Image Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Fix Vulnerabilities in Docker Image (Optional)
      - name: Fix Vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          command: fix
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 7: Push Docker Image to ECR
      - name: Push Docker image to ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure kubectl for Amazon EKS
      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > ~/.kube/config

      # Step 3: Update Kubernetes manifests with the new image
      - name: Update Kubernetes manifests
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          sed -i "s|my-argocd-app|$ECR_REGISTRY/$ECR_REPOSITORY:latest|g" ./config/k8s/deployment.yaml

      # Step 4: Apply Kubernetes manifests to Amazon EKS
      - name: Apply Kubernetes manifests to EKS
        run: |
          kubectl apply -f ./config/k8s/argocd-app.yaml



